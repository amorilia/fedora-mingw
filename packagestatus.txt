Status of packages in Fedora, EPEL and RHEL, last updated on 2009-01-19.

<html>
<table class="top_table fedoratbl">
<tr><th>Name</th>
<th class="epelbg"><a title="Packages for Red Hat Enterprise Linux 5" href="http://fedoraproject.org/wiki/EPEL">EPEL&nbsp;5</a></th>
<th class="fedorabg"><a href="http://fedoraproject.org/">Fedora&nbsp;10</a></th>
<th class="develbg"><a title="Fedora 11 in development a.k.a. Rawhide" href="http://fedoraproject.org/wiki/Releases/Rawhide">Devel</a></th>
<th class="pendingbg"><a href="https://bugzilla.redhat.com/buglist.cgi?version=rawhide&component=Package+Review&target_milestone=&bug_status=NEW&bug_status=ASSIGNED&bug_status=NEEDINFO&bug_status=MODIFIED&short_desc_type=allwordssubstr&short_desc=mingw32&long_desc_type=allwordssubstr&long_desc=">Pending</a></th>
</tr>
<tr><td><a title="MinGW Windows Atk library.


" href="http://developer.gnome.org/projects/gap/">mingw32-atk</a><br/><small>MinGW Windows Atk library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.24.0</td>
</tr>
<tr><td><a title="MinGW Windows binutils (utilities like &#39;strip&#39;, &#39;as&#39;, &#39;ld&#39;) which
understand Windows executables and DLLs.


" href="http://www.mingw.org/">mingw32-binutils</a><br/><small>MinGW Windows binutils</small></td>
<td class="epelbg released">2.19</td>
<td class="fedorabg released">2.19</td>
<td class="develbg devel">2.19</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="Boost provides free peer-reviewed portable C++ source libraries.  The
emphasis is on libraries which work well with the C++ Standard
Library, in the hopes of establishing &quot;existing practice&quot; for
extensions and providing reference implementations so that the Boost
libraries are suitable for eventual standardization. (Some of the
libraries have already been proposed for inclusion in the C++
Standards Committee&#39;s upcoming C++ Standard Library Technical Report.)


" href="http://www.boost.org/">mingw32-boost</a><br/><small>MinGW Windows port of Boost C++ Libraries</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.34.1</td>
</tr>
<tr><td><a title="Bzip2 is a freely available, patent-free, high quality data compressor.
Bzip2 compresses files to within 10 to 15 percent of the capabilities 
of the best techniques available.  However, bzip2 has the added benefit 
of being approximately two times faster at compression and six times 
faster at decompression than those techniques.  Bzip2 is not the 
fastest compression utility, but it does strike a balance between speed 
and compression capability.

This package contains development tools and libraries for use when
cross-compiling Windows software in Fedora.


" href="http://www.bzip.org/">mingw32-bzip2</a><br/><small>MinGW port of bzip2 file compression utility</small></td>
<td class="epelbg released">1.0.5</td>
<td class="fedorabg released">1.0.5</td>
<td class="develbg devel">1.0.5</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows Cairo library.


" href="http://cairographics.org">mingw32-cairo</a><br/><small>MinGW Windows Cairo library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.8.0</td>
</tr>
<tr><td><a title="Cairomm is the C++ API for the cairo graphics library. It offers all the power
of cairo with an interface familiar to C++ developers, including use of the 
Standard Template Library where it makes sense.


" href="http://www.cairographics.org">mingw32-cairomm</a><br/><small>MinGW Windows C++ API for the cairo graphics library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.6.2</td>
</tr>
<tr><td><a title="cURL is a tool for getting files from HTTP, FTP, FILE, LDAP, LDAPS,
DICT, TELNET and TFTP servers, using any of the supported protocols.
cURL is designed to work without user interaction or any kind of
interactivity. cURL offers many useful capabilities, like proxy
support, user authentication, FTP upload, HTTP post, and file transfer
resume.

This is the MinGW cross-compiled Windows library.


" href="http://curl.haxx.se/">mingw32-curl</a><br/><small>MinGW Windows port of curl and libcurl</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">7.18.2</td>
</tr>
<tr><td><a title="D-BUS is a system for sending messages between applications. It is
used both for the systemwide message bus service, and as a
per-user-login-session messaging facility.


" href="http://sourceforge.net/projects/windbus">mingw32-dbus</a><br/><small>MinGW Windows port of DBus</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.2.4</td>
</tr>
<tr><td><a title="This library implements a wrapper for dlfcn, as specified in POSIX and SUS,
around the dynamic link library functions found in the Windows API.


" href="http://code.google.com/p/dlfcn-win32/">mingw32-dlfcn</a><br/><small>Implements a wrapper for dlfcn (dlopen dlclose dlsym dlerror)</small></td>
<td class="epelbg released">0</td>
<td class="fedorabg released">0</td>
<td class="develbg devel">0</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td>mingw32-example</td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.2.3</td>
</tr>
<tr><td><a title="This is expat, the C library for parsing XML, written by James Clark. Expat
is a stream oriented XML parser. This means that you register handlers with
the parser prior to starting the parse. These handlers are called when the
parser discovers the associated structures in the document being parsed. A
start tag is an example of the kind of structures for which you may
register handlers.


" href="http://www.libexpat.org/">mingw32-expat</a><br/><small>MinGW Windows port of expat XML parser library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.0.1</td>
</tr>
<tr><td><a title="This package contains the base filesystem layout, RPM macros and
environment for all Fedora MinGW packages.

This environment is maintained by the Fedora MinGW SIG at:

  http://fedoraproject.org/wiki/SIGs/MinGW


" href="http://hg.et.redhat.com/misc/fedora-mingw--devel/">mingw32-filesystem</a><br/><small>MinGW base filesystem and environment</small></td>
<td class="epelbg filesystem">40</td>
<td class="fedorabg filesystem">40</td>
<td class="develbg filesystem">42</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="Under Windows, DLL (Dynamically-Linked Libraries) are generally used
to improve code modularity and sharing. A DLL can be loaded
automatically when the program is loaded (if it requires the DLL). The
program can also explicitly request Windows to load a DLL at any
moment during runtime, using the LoadLibrary function from the Win32
API.

This naturally suggests to use DLLs as a plugin mechanism. For
instance, a web server could load extensions modules stored in DLLs at
runtime. But Windows does not really make it easy to implement plugins
that way. The reason is that when you try to create a DLL from a set
of object files, the linker needs to resolve all the symbols, which
leads to the very problem solved by FlexDLL:

Windows DLL cannot refer to symbols defined in the main application or
in previously loaded DLLs.

Some usual solutions exist, but they are not very flexible. A notable
exception is the edll library (its homepage also describes the usual
solutions), which follows a rather drastic approach; indeed, edll
implements a new dynamic linker which can directly load object files
(without creating a Windows DLL).

FlexDLL is another solution to the same problem. Contrary to edll, it
relies on the native static and dynamic linkers. Also, it works both
with the Microsoft environment (MS linker, Visual Studio compilers)
and with Cygwin (GNU linker and compilers, in Cygwin or MinGW
mode). Actually, FlexDLL implements mostly the usual dlopen POSIX API,
without trying to be fully conformant though (e.g. it does not respect
the official priority ordering for symbol resolution). This should
make it easy to port applications developed for Unix.


" href="http://alain.frisch.fr/flexdll.html">mingw32-flexdll</a><br/><small>FlexDLL Windows DLL plugin API which is like dlopen</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">0.11</td>
</tr>
<tr><td><a title="MinGW Windows Fontconfig library.


" href="http://fontconfig.org">mingw32-fontconfig</a><br/><small>MinGW Windows Fontconfig library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.6.0</td>
</tr>
<tr><td><a title="MinGW Windows Freetype library.


" href="http://www.freetype.org">mingw32-freetype</a><br/><small>Free and portable font rendering engine</small></td>
<td class="epelbg released">2.3.8</td>
<td class="fedorabg released">2.3.8</td>
<td class="develbg devel">2.3.8</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="The Boehm-Demers-Weiser conservative garbage collector can be 
used as a garbage collecting replacement for C malloc or C++ new.


" href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/">mingw32-gc</a><br/><small>MinGW Windows port of GC garbage collector for C and C++</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">7.1</td>
</tr>
<tr><td><a title="MinGW Windows cross-compiler (GCC) for C


" href="http://www.mingw.org/">mingw32-gcc</a><br/><small>MinGW Windows cross-compiler (GCC) for C</small></td>
<td class="epelbg released">4.3.2</td>
<td class="fedorabg released">4.3.2</td>
<td class="develbg devel">4.3.2</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="This is the MinGW port of the GNU debugger (gdb).

Note this is a Fedora native binary which debugs Windows target
executables.


" href="http://www.mingw.org/MinGWiki/index.php/gdb">mingw32-gdb</a><br/><small>MinGW port of the GNU debugger (gdb)</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">6.8</td>
</tr>
<tr><td><a title="Gdbm is a GNU database indexing library, including routines which use
extensible hashing.  Gdbm works in a similar way to standard UNIX dbm
routines.  Gdbm is useful for developers who write C applications and
need access to a simple and efficient database or who are building C
applications which will use such a database.

This is the MinGW Windows port of the libraries and development tools.


" href="http://www.gnu.org/software/gdbm/">mingw32-gdbm</a><br/><small>MinGW port of GNU database routines</small></td>
<td class="epelbg released">1.8.0</td>
<td class="fedorabg released">1.8.0</td>
<td class="develbg devel">1.8.0</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows Gettext library


" href="http://www.gnu.org/software/gettext/">mingw32-gettext</a><br/><small>GNU libraries and utilities for producing multi-lingual messages</small></td>
<td class="epelbg released">0.17</td>
<td class="fedorabg released">0.17</td>
<td class="develbg devel">0.17</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows Glib2 library.


" href="http://www.gtk.org">mingw32-glib2</a><br/><small>MinGW Windows GLib2 library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.18.1</td>
</tr>
<tr><td><a title="glibmm provides a C++ interface to the GTK+ GLib low-level core
library. Highlights include typesafe callbacks, widgets extensible via
inheritance and a comprehensive set of widget classes that can be
freely combined to quickly create complex user interfaces.


" href="http://gtkmm.sourceforge.net/">mingw32-glibmm24</a><br/><small>MinGW Windows C++ interface for GTK2 (a GUI library for X)</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.18.1</td>
</tr>
<tr><td><a title="MinGW Windows GnuTLS TLS/SSL encryption library.


" href="http://www.gnutls.org/">mingw32-gnutls</a><br/><small>MinGW Windows GnuTLS TLS/SSL encryption library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.4.2</td>
</tr>
<tr><td><a title="The GNU Scientific Library (GSL) is a collection of routines for
numerical analysis, written in C.


" href="http://www.gnu.org/software/gsl/">mingw32-gsl</a><br/><small>MinGW Windows port of the GNU Scientific Library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.11</td>
</tr>
<tr><td><a title="gtk-vnc is a VNC viewer widget for GTK. It is built using coroutines
allowing it to be completely asynchronous while remaining single threaded.


" href="http://gtk-vnc.sf.net/">mingw32-gtk-vnc</a><br/><small>MinGW Windows port of VNC client GTK widget</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">0.3.8</td>
</tr>
<tr><td><a title="MinGW Windows Gtk2 library.


" href="http://www.gtk.org">mingw32-gtk2</a><br/><small>MinGW Windows Gtk2 library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.14.4</td>
</tr>
<tr><td><a title="gtkmm provides a C++ interface to the GTK+ GUI library. gtkmm2 wraps
GTK+ 2.  Highlights include typesafe callbacks, widgets extensible via
inheritance and a comprehensive set of widget classes that can be
freely combined to quickly create complex user interfaces.



" href="http://gtkmm.sourceforge.net/">mingw32-gtkmm24</a><br/><small>MinGW Windows C++ interface for GTK2 (a GUI library for X)</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.14.1</td>
</tr>
<tr><td><a title="MinGW Windows Iconv library


" href="http://www.gnu.org/software/libiconv/">mingw32-iconv</a><br/><small>GNU libraries and utilities for character set conversion</small></td>
<td class="epelbg released">1.12</td>
<td class="fedorabg released">1.12</td>
<td class="develbg devel">1.12</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows Jasper library.


" href="http://www.ece.uvic.ca/~mdadams/jasper/">mingw32-jasper</a><br/><small>MinGW Windows Jasper library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.900.1</td>
</tr>
<tr><td><a title="MinGW Windows gcrypt encryption library.


" href="ftp://ftp.gnupg.org/gcrypt/libgcrypt/">mingw32-libgcrypt</a><br/><small>MinGW Windows gcrypt encryption library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.4.3</td>
</tr>
<tr><td><a title="MinGW Windows Libglade2 library.


" href="http://www.gnome.org">mingw32-libglade2</a><br/><small>MinGW Windows Libglade2 library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.6.3</td>
</tr>
<tr><td><a title="MinGW Windows GnuPGP error library.


" href="ftp://ftp.gnupg.org/gcrypt/libgpg-error/">mingw32-libgpg-error</a><br/><small>MinGW Windows GnuPGP error library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.6</td>
</tr>
<tr><td><a title="A library for reading and writing structured files (eg MS OLE and Zip).

This is the MinGW Windows cross-compiled port of libgsf.


" href="http://www.gnome.org/projects/libgsf/">mingw32-libgsf</a><br/><small>MinGW Windows port of GNOME Structured File Library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.14.10</td>
</tr>
<tr><td><a title="GNU Libidn is an implementation of the Stringprep, Punycode and
IDNA specifications defined by the IETF Internationalized Domain
Names (IDN) working group, used for internationalized domain
names.


" href="http://www.gnu.org/software/libidn/">mingw32-libidn</a><br/><small>MinGW Windows Internationalized Domain Name support library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.9</td>
</tr>
<tr><td><a title="MinGW Windows Libjpeg library.


" href="http://www.ijg.org/">mingw32-libjpeg</a><br/><small>MinGW Windows Libjpeg library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">6b</td>
</tr>
<tr><td><a title="MinGW Windows Libpng library.


" href="http://www.libpng.org/pub/png/">mingw32-libpng</a><br/><small>MinGW Windows Libpng library</small></td>
<td class="epelbg released">1.2.34</td>
<td class="fedorabg released">1.2.34</td>
<td class="develbg devel">1.2.34</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="This library implements a full callback system for use in widget
libraries, abstract interfaces, and general programming. Originally
part of the Gtk-- widget set, %name is now a separate library to
provide for more general use. It is the most complete library of its
kind with the ability to connect an abstract callback to a class
method, function, or function object. It contains adaptor classes for
connection of dissimilar callbacks and has an ease of use unmatched by
other C++ callback libraries.

Package GTK-- (gtkmm), which is a C++ binding to the GTK+ library,
starting with version 1.1.2, uses %name.


" href="http://libsigc.sourceforge.net/">mingw32-libsigc++20</a><br/><small>MinGW Windows port of the typesafe signal framework for C++</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.2.2</td>
</tr>
<tr><td><a title="libssh2 is a library implementing the SSH2 protocol as defined by
Internet Drafts: SECSH-TRANS(22), SECSH-USERAUTH(25),
SECSH-CONNECTION(23), SECSH-ARCH(20), SECSH-FILEXFER(06)*,
SECSH-DHGEX(04), and SECSH-NUMBERS(10).


" href="http://www.libssh2.org/">mingw32-libssh2</a><br/><small>MinGW Windows library implementing the SSH2 protocol</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">0.18</td>
</tr>
<tr><td><a title="MinGW Windows libvirt virtualization library.


" href="http://libvirt.org/">mingw32-libvirt</a><br/><small>MinGW Windows libvirt virtualization library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">0.5.0</td>
</tr>
<tr><td><a title="MinGW Windows libxml2 XML processing library.


" href="http://xmlsoft.org/">mingw32-libxml2</a><br/><small>MinGW Windows libxml2 XML processing library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.7.2</td>
</tr>
<tr><td><a title="This C library allows to transform XML files into other XML files
(or HTML, text, ...) using the standard XSLT stylesheet transformation
mechanism. To use it you need to have a version of libxml2 &gt;= 2.6.27
installed. The xsltproc command is a command line interface to the XSLT engine


" href="http://xmlsoft.org/XSLT/">mingw32-libxslt</a><br/><small>MinGW Windows Library providing the Gnome XSLT engine</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.1.24</td>
</tr>
<tr><td><a title="NSIS, the Nullsoft Scriptable Install System, is a script-driven
Windows installation system.

This package includes native Fedora binaries of makensis (etc.) and
all plugins except for System.dll.  The System.dll plugin cannot be
built natively at this time since it includes inline Microsoft
assembler code.


" href="http://nsis.sourceforge.net/">mingw32-nsis</a><br/><small>Nullsoft Scriptable Install System</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.39</td>
</tr>
<tr><td><a title="NSISWrapper is a helper program for making Windows installers,
particularly when you are cross-compiling from Unix.

NSIS (a separate package) is a program for building Windows
installers.  This wrapper simply makes it easier to generate the
installer script that NSIS needs.


" href="http://fedoraproject.org/wiki/MinGW">mingw32-nsiswrapper</a><br/><small>Helper program for making NSIS Windows installers</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">3</td>
</tr>
<tr><td><a title="NSPR provides platform independence for non-GUI operating system
facilities. These facilities include threads, thread synchronization,
normal file and network I/O, interval timing and calendar time, basic
memory management (malloc and free) and shared library linking.


" href="http://www.mozilla.org/projects/nspr/">mingw32-nspr</a><br/><small>MinGW Windows port of the Netscape Portable Runtime (NSPR)</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">4.7.2</td>
</tr>
<tr><td><a title="Network Security Services (NSS) is a set of libraries designed to
support cross-platform development of security-enabled client and
server applications. Applications built with NSS can support SSL v2
and v3, TLS, PKCS #5, PKCS #7, PKCS #11, PKCS #12, S/MIME, X.509
v3 certificates, and other security standards.


" href="http://www.mozilla.org/projects/security/pki/nss/">mingw32-nss</a><br/><small>MinGW Windows port of NSS (Network Security Services)</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">3.12.2.0</td>
</tr>
<tr><td><a title="Objective Caml is a high-level, strongly-typed, functional and
object-oriented programming language from the ML family of languages.

This package is an OCaml cross-compiler which runs natively on Fedora
and produces Windows native executables.


" href="http://caml.inria.fr/">mingw32-ocaml</a><br/><small>Objective Caml MinGW cross-compiler and programming environment</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">3.11.0</td>
</tr>
<tr><td><a title="Objective Caml library for managing dates and times.


" href="http://www.lri.fr/~signoles/prog.en.html#calendar">mingw32-ocaml-calendar</a><br/><small>MinGW Windows OCaml library for managing dates and times</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.0.4</td>
</tr>
<tr><td><a title="This OCaml library can read and write CSV files, including all
extensions used by Excel - eg. quotes, newlines, 8 bit characters in
fields, quote-0 etc.

The library comes with a handy command line tool called csvtool for
handling CSV files from shell scripts.


" href="http://merjis.com/developers/csv">mingw32-ocaml-csv</a><br/><small>MinGW Windows OCaml library for reading and writing CSV files</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.1.7</td>
</tr>
<tr><td><a title="OCaml bindings for curses.


" href="http://savannah.nongnu.org/projects/ocaml-tmk/">mingw32-ocaml-curses</a><br/><small>MinGW Windows OCaml bindings for ncurses</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.0.3</td>
</tr>
<tr><td><a title="ExtLib is a project aiming at providing a complete - yet small -
standard library for the OCaml programming language. The purpose of
this library is to add new functions to OCaml Standard Library
modules, to modify some functions in order to get better performances
or more safety (tail-recursive) but also to provide new modules which
should be useful for the average OCaml programmer.


" href="http://code.google.com/p/ocaml-extlib/">mingw32-ocaml-extlib</a><br/><small>MinGW Windows port of OCaml ExtLib</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.5.1</td>
</tr>
<tr><td><a title="Objective CAML package manager and build helper.


" href="http://projects.camlcity.org/projects/findlib.html">mingw32-ocaml-findlib</a><br/><small>MinGW Windows Objective CAML package manager and build helper</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.2.3</td>
</tr>
<tr><td><a title="LablGL is is an Objective Caml interface to OpenGL. Support is
included for use inside LablTk, and LablGTK also includes specific
support for LablGL.  It can be used either with proprietary OpenGL
implementations (SGI, Digital Unix, Solaris...), with XFree86 GLX
extension, or with open-source Mesa.

This is the MinGW Windows port of this package.  Currently it does not
support Togl (Tk integration).


" href="http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/lablgl.html">mingw32-ocaml-lablgl</a><br/><small>MinGW Windows port of LablGL is an OpenGL interface</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.03</td>
</tr>
<tr><td><a title="LablGTK is is an Objective Caml interface to gtk+.

It uses the rich type system of Objective Caml 3 to provide a strongly
typed, yet very comfortable, object-oriented interface to gtk+. This
is not that easy if you know the dynamic typing approach taken by
gtk+.

This is the MinGW Windows port of this package.  Currently it does not
support Togl (Tk integration).


" href="http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/lablgtk.html">mingw32-ocaml-lablgtk</a><br/><small>MinGW Windows port of LablGTK, OCaml interface to Gtk+</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.10.1</td>
</tr>
<tr><td><a title="OCaml binding for libvirt.


" href="http://libvirt.org/ocaml/">mingw32-ocaml-libvirt</a><br/><small>MinGW Windows port of OCaml binding for libvirt</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">0.4.4.2</td>
</tr>
<tr><td><a title="Xml-Light is a minimal XML parser &amp; printer for OCaml. It provides
functions to parse an XML document into an OCaml data structure, work
with it, and print it back to an XML document. It support also DTD
parsing and checking, and is entirely written in OCaml, hence it does
not require additional C library.


" href="http://tech.motion-twin.com/xmllight.html">mingw32-ocaml-xml-light</a><br/><small>MinGW Windows minimal XML parser and printer for OCaml</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.2.cvs20070817</td>
</tr>
<tr><td><a title="The OpenSSL toolkit provides support for secure communications between
machines. OpenSSL includes a certificate management tool and shared
libraries which provide various cryptographic algorithms and
protocols.

This package contains Windows (MinGW) libraries and development tools.


" href="http://www.openssl.org/">mingw32-openssl</a><br/><small>MinGW port of the OpenSSL toolkit</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">0.9.8g</td>
</tr>
<tr><td><a title="MinGW Windows Pango library.


" href="http://www.pango.org">mingw32-pango</a><br/><small>MinGW Windows Pango library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.22.1</td>
</tr>
<tr><td><a title="pangomm provides a C++ interface to the Pango library. Highlights
include typesafe callbacks, widgets extensible via inheritance and a
comprehensive set of widget classes that can be freely combined to
quickly create complex user interfaces.


" href="http://gtkmm.sourceforge.net/">mingw32-pangomm</a><br/><small>MinGW Windows C++ interface for Pango</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">2.14.0</td>
</tr>
<tr><td><a title="PDCurses is a public domain curses library for DOS, OS/2, Win32, X11
and SDL, implementing most of the functions available in X/Open and
System V R4 curses. It supports many compilers for these
platforms. The X11 port lets you recompile existing text-mode curses
programs to produce native X11 applications.

Note that ncurses is not available for MinGW / Windows.  Applications
which need curses functionality can use this package, provided they
don&#39;t use any of the extensions specific to ncurses.


" href="http://pdcurses.sourceforge.net/">mingw32-pdcurses</a><br/><small>Curses library for MinGW</small></td>
<td class="epelbg released">3.4</td>
<td class="fedorabg released">3.4</td>
<td class="develbg devel">3.4</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows Pixman library.


" href="http://xorg.freedesktop.org/">mingw32-pixman</a><br/><small>MinGW Windows Pixman library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">0.13.2</td>
</tr>
<tr><td><a title="POCO, the C++ Portable Components, is a collection of open source C++
class libraries that simplify and accelerate the development of
network-centric, portable applications in C++. The libraries integrate
perfectly with the C++ Standard Library and fill many of the
functional gaps left open by it. Their modular and efficient design
and implementation makes the C++ Portable Components extremely well
suited for embedded development, an area where the C++ programming
language is becoming increasingly popular, due to its suitability for
both low-level (device I/O, interrupt handlers, etc.) and high-level
object-oriented development. Of course, POCO is also ready for
enterprise-level challenges.

The POCO libraries free developers from re-inventing the wheel, and
allow them to spend their time on more worthwhile areas, such as
getting things done quickly and working on the features that make
their application unique.


" href="http://pocoproject.org/">mingw32-poco</a><br/><small>MinGW Windows C++ libraries for network-centric applications</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.3.3p1</td>
</tr>
<tr><td><a title="Popt is a C library for parsing command line parameters. Popt was
heavily influenced by the getopt() and getopt_long() functions, but
it improves on them by allowing more powerful argument expansion.
Popt can parse arbitrary argv[] style arrays and automatically set
variables based on command line arguments. Popt allows command line
arguments to be aliased via configuration files and includes utility
functions for parsing arbitrary strings into argv[] arrays using
shell-like rules.


" href="http://www.rpm5.org/">mingw32-popt</a><br/><small>MinGW Windows C library for parsing command line parameters</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">1.13_cvs20081025</td>
</tr>
<tr><td><a title="MinGW Windows PortableXDR XDR / RPC library.


" href="http://et.redhat.com/~rjones/portablexdr/">mingw32-portablexdr</a><br/><small>MinGW Windows PortableXDR XDR / RPC library</small></td>
<td class="epelbg">&nbsp;</td>
<td class="fedorabg">&nbsp;</td>
<td class="develbg">&nbsp;</td>
<td class="pendingbg pending">4.0.11</td>
</tr>
<tr><td><a title="The POSIX 1003.1-2001 standard defines an application programming
interface (API) for writing multithreaded applications. This interface
is known more commonly as pthreads. A good number of modern operating
systems include a threading library of some kind: Solaris (UI)
threads, Win32 threads, DCE threads, DECthreads, or any of the draft
revisions of the pthreads standard. The trend is that most of these
systems are slowly adopting the pthreads standard API, with
application developers following suit to reduce porting woes.

Win32 does not, and is unlikely to ever, support pthreads
natively. This project seeks to provide a freely available and
high-quality solution to this problem.


" href="http://sourceware.org/pthreads-win32/">mingw32-pthreads</a><br/><small>MinGW pthread library</small></td>
<td class="epelbg released">2.8.0</td>
<td class="fedorabg released">2.8.0</td>
<td class="develbg devel">2.8.0</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="The Readline library provides a set of functions that allow users to
edit command lines. Both Emacs and vi editing modes are available. The
Readline library includes additional functions for maintaining a list
of previously-entered command lines for recalling or editing those
lines, and for performing csh-like history expansion on previous
commands.

This is a port of the library and development tools to Windows.


" href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">mingw32-readline</a><br/><small>MinGW port of readline for editing typed command lines</small></td>
<td class="epelbg released">5.2</td>
<td class="fedorabg released">5.2</td>
<td class="develbg devel">5.2</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows cross-compiler runtime, base libraries.


" href="http://www.mingw.org/">mingw32-runtime</a><br/><small>MinGW Windows cross-compiler runtime</small></td>
<td class="epelbg released">3.15.1</td>
<td class="fedorabg released">3.15.1</td>
<td class="develbg devel">3.15.1</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="Simple DirectMedia Layer (SDL) is a cross-platform multimedia library
designed to provide fast access to the graphics frame buffer and audio
device.


" href="http://www.libsdl.org/">mingw32-SDL</a><br/><small>MinGW Windows port of SDL cross-platform multimedia library</small></td>
<td class="epelbg released">1.2.13</td>
<td class="fedorabg released">1.2.13</td>
<td class="develbg devel">1.2.13</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="SQLite is a C library that implements an SQL database engine. A large
subset of SQL92 is supported. A complete database is stored in a
single disk file. The API is designed for convenience and ease of use.
Applications that link against SQLite can enjoy the power and
flexibility of an SQL database without the administrative hassles of
supporting a separate database server.  Version 2 and version 3 binaries
are named to permit each to be installed on a single host

This package contains cross-compiled libraries and development tools
for Windows.


" href="http://www.sqlite.org/">mingw32-sqlite</a><br/><small>MinGW Windows port of sqlite embeddable SQL database engine</small></td>
<td class="epelbg released">3.6.6.2</td>
<td class="fedorabg released">3.6.6.2</td>
<td class="develbg devel">3.6.6.2</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="This is the GNU termcap library -- a library of C functions that
enable programs to send control strings to terminals in a way
independent of the terminal type.  The GNU termcap library does not
place an arbitrary limit on the size of termcap entries, unlike most
other termcap libraries.

This package contains libraries and development tools for the MinGW
cross-compiled version.


" href="ftp://ftp.gnu.org/gnu/termcap/">mingw32-termcap</a><br/><small>MinGW terminal feature database</small></td>
<td class="epelbg released">1.3.1</td>
<td class="fedorabg released">1.3.1</td>
<td class="develbg devel">1.3.1</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows cross-compiler Win32 header files.


" href="http://www.mingw.org/">mingw32-w32api</a><br/><small>Win32 header files and stubs</small></td>
<td class="epelbg released">3.12</td>
<td class="fedorabg released">3.12</td>
<td class="develbg devel">3.13</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td><a title="MinGW Windows zlib compression library.


" href="http://www.zlib.net/">mingw32-zlib</a><br/><small>MinGW Windows zlib compression library</small></td>
<td class="epelbg released">1.2.3</td>
<td class="fedorabg released">1.2.3</td>
<td class="develbg devel">1.2.3</td>
<td class="pendingbg">&nbsp;</td>
</tr>
<tr><td>Totals</td><td>19</td><td>19</td><td>19</td><td>52</td></tr>
</table>
</html>
